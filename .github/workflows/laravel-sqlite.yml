name: Laravel application (SQlite)
on:
  push:
    branches:
      - master
      - staging
  pull_request:
    branches:
      - master
      - staging
env:
  COMPOSER_VERSION: "^2.1"
  PHP_EXTENSIONS: "mbstring, ds, ssh2"
  PHP_INI_VALUES: "memory_limit=-1, phar.readonly=0"
  SESSION_DRIVER: array
  DB_CONNECTION: sqlite
  DB_DATABASE: "database/database.sqlite"
  CACHE_DRIVER: array
  APP_FFMPEG_BINARY_PATH: /opt/hostedtoolcache/ffmpeg/6.0/x64/
  STRIPE_API_SECRET: ""
  STRIPE_API_PUBLIC: ""
  MAIL_DRIVER: log
  APP_DECAL_PSK: "432646294A404E635266546A576E5A7234753778214125442A472D4B6150645367566B58703273357638792F423F4528482B4D6251655468576D5A7134743677"
  DOMAIN_ADMIN: admin.example.com
  DOMAIN_WWW: example.com
  DOMAIN_DEVICE: devices.example.com
  APP_DEFAULT_DISK: local
  FILESYSTEM_DRIVER: local
jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        operating-system: [ubuntu-latest]
        php-versions: [ '7.3', '7.4' ]
        dependency-stability: [ prefer-stable ]
    name: P${{ matrix.php-versions }} - L${{ matrix.laravel }} - ${{ matrix.dependency-stability }} - ${{ matrix.operating-system}}
    steps:
    - uses: actions/checkout@v3
    - name: check directory
      run: ls -lha
    - name: setup environment
      uses: ./.github/actions/setup
      with:
        php-versions: "${{ matrix.php-versions }}"
        php-extensions: "${{ env.PHP_EXTENSIONS }}"
        php-ini-values: "${{ env.PHP_INI_VALUES }}"
        composer-github-oauth: ${{ secrets.COMPOSER_GITHUB_TOKEN }}
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Copy base file for http mocks
      run: |
          mkdir -p public/www/images/venue
          cp resources/images/venue/main.jpg public/www/images/venue/main.jpg
    - name: Create Database
      run: |
          mkdir -p database
          touch database/database.sqlite
    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Run Migrations
      run: php artisan migrate
    - name: Seed test data
      run: php artisan db:seed -v --class=TelescopeSeeder
    - name: Setup ffmpeg
      uses: FedericoCarboni/setup-ffmpeg@v2
    - name: Execute tests (Unit and Feature tests) via ParaTest
      run: vendor/bin/paratest -p 4    
  security:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
      - name: 'Run php-insight'
        run: |
          PHP_SC_VERSION=$(curl -s "https://api.github.com/repos/fabpot/local-php-security-checker/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/;s/^v//')
          curl -LSs https://github.com/fabpot/local-php-security-checker/releases/download/v${PHP_SC_VERSION}/local-php-security-checker_${PHP_SC_VERSION}_linux_amd64 > ./php-security-checker
          chmod +x ./php-security-checker
          unset PHP_SC_VERSION
          ./php-security-checker
  phpcpd:
    runs-on: ubuntu-20.04
    name: PHP Copy Paste Detection
    steps:
      - uses: actions/checkout@v3
      - uses: shivammathur/setup-php@v2
        with:
          coverage: "none"
          tools: "composer:v2"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          php-version: "7.4"
      - name: 'Run Phpcpd'
        run: |
          sudo test -f phpcpd.phar || curl -L https://phar.phpunit.de/phpcpd.phar -o phpcpd.phar
          sudo php phpcpd.phar app/
  phpcs:
    runs-on: ubuntu-20.04
    name: Code Styles
    steps:
      - uses: actions/checkout@v3
      - uses: shivammathur/setup-php@v2
        with:
          coverage: "none"
          tools: "composer:v2"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          php-version: "7.4"
      - name: 'Run php -cs'
        run: |
          composer require --dev squizlabs/php_codesniffer
          vendor/bin/phpcs --exclude=Generic.Files.LineLength --standard=PSR12 app
  larastan:
    runs-on: ubuntu-20.04
    name: Code Static Analysis
    steps:
      - uses: actions/checkout@v3
      - uses: shivammathur/setup-php@v2
        with:
          coverage: "none"
          tools: "composer:v2"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          ini-values: "${{ env.PHP_INI_VALUES }}"
          php-version: "7.4"
      - name: 'Run php-larastan'
        run: |
          composer require --dev nunomaduro/larastan
          vendor/bin/phpstan analyse app -c ./vendor/nunomaduro/larastan/extension.neon  --level=0 --no-progress
  build-js-production:
    name: Build JavaScript/CSS for Production Server
    runs-on: ubuntu-latest
    needs: [ laravel-tests ]
    if: github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '15.x'
      - name: NPM Build
        run: |
          npm install
          npm run prod
      - name: Put built assets in Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: assets
          path: public
          retention-days: 3

  deploy:
    name: Deploy Project
    runs-on: ubuntu-latest
    needs: [ build-js-production ]
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/master'
    steps:
      - name: Extract branch name and setup Env
        id: extract_branch
        shell: bash
        env:
          DOT_ENV_STAGING: ${{ secrets.DOT_ENV_STAGING }}
          DOT_ENV_PROD: ${{ secrets.DOT_ENV_PROD }}
          STAGING_PK: ${{ secrets.SSH_PRIVATE_KEY }}
          STAGING_KH: ${{ secrets.SSH_KNOWN_HOSTS }}
          LIVE_PK: ${{ secrets.SSH_PRIVATE_KEY_LIVE }}
          LIVE_KH: ${{ secrets.SSH_KNOWN_HOSTS_LIVE }}
        run: |
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          if [ ${{ github.ref }} != 'refs/heads/master' ]; then
            echo "IS NOT the main branch"
            echo "DOT_ENV=$DOT_ENV_STAGING" >> $GITHUB_ENV
            echo "PK=$STAGING_PK" >> $GITHUB_OUTPUT
            echo "KH=$STAGING_KH" >> $GITHUB_OUTPUT
          else
            echo "IS the main branch"
            echo "DOT_ENV=$DOT_ENV_PROD" >> $GITHUB_ENV
            echo "PK=$LIVE_PK" >> $GITHUB_OUTPUT
            echo "KH=$LIVE_KH" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v3
      - name: Fetch built assets from Artifacts
        uses: actions/download-artifact@v1
        with:
          name: assets
          path: public
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: '7.3'
          coverage: "none"
          tools: "deployer, composer:v2"
          extensions: "mbstring, ds, ssh2, imagick, dom, curl"
          ini-values: "memory_limit=-1, phar.readonly=0"
      - name: Composer install
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Setup Deployer
        uses: atymic/deployer-php-action@master
        with:
          ssh-private-key: ${{ steps.extract_branch.outputs.PK }}
          ssh-known-hosts: ${{ steps.extract_branch.outputs.KH }}
      - name: Deploy to Staging
        run: dep deploy ${{ steps.extract_branch.outputs.branch }} --branch="${{ steps.extract_branch.outputs.branch }}" -vv